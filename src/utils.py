async def find_coincidence_in_list(mes_text, roster, prefix=""):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ roster"""
    mes_text_with_dash = await add_dash_in_group(mes_text)
    result_roster = {}

    for roster_key in roster:
        if (roster[roster_key].lower().startswith(mes_text.lower()) or
                roster[roster_key].lower().startswith(mes_text_with_dash.lower())):
            result_roster[roster_key + prefix] = roster[roster_key]
    return result_roster


async def find_coincidence_group_teacher(mes_text, schedule):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    all_coincidence = [await find_coincidence_in_list(mes_text, schedule.get_groups()),
                       await find_coincidence_in_list(mes_text, schedule.get_teachers())]
    return all_coincidence


async def add_dash_in_group(text):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ç–∏—Ä–µ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–æ–º –∏ —Ü–∏—Ñ—Ä–æ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –≥—Ä—É–ø–ø"""
    position = 0

    for char in text:
        position += 1

        if not char.isalpha() and char.isnumeric():
            text = text[:position - 1] + '-' + text[position - 1:]
            break

    return text


def add_sign_group_or_teacher(data: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–ø–∏—Å—å "üë• –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" –∏–ª–∏ "üë• –ì—Ä—É–ø–ø–∞"."""
    if data.endswith("."):
        data = f"üë• –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {data}"
    else:
        data = f"üë• –ì—Ä—É–ø–ø–∞ {data}"

    return data
