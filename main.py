import asyncio
import logging
import aiogram

from aiogram import Dispatcher
from magic_filter import F

# –°–≤–æ–∏ –º–æ–¥—É–ª–∏
import config
import message_editor
import utils

from user_db import *
from schedule_data import ScheduleData
from keyboards import group_and_teacher_kb, main_kb, schedule_kb
from aiogram.filters import Command

dp = Dispatcher()


@dp.message(Command("start"))
async def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_db.is_user_exists(message.chat.id) is not None:
        await message_editor.delete_last_message_from_db(message.bot, message.chat.id, user_db.get_cursor())

    message_from_bot = await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã \n"
                                                 f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã / –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")

    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É /start —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message_editor.delete_current_message_from_user(message)

    # –û–±–Ω–æ–≤–ª—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_db.update_user_message_id(message_from_bot)


@dp.message()
async def handle_any_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message_editor.delete_current_message_from_user(message)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ç–µ–∫—Å—Ç
    if message.text is None:
        return

    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä—É–ø–ø–∞–º–∏/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
    coincidence = await utils.find_coincidence_group_teacher(message.text, sch)

    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_message_id = user_db.get_last_message_id(message.chat.id)

    # –ï—Å–ª–∏ –º—ã –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ 1 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if len(coincidence[0]) == 1 or len(coincidence[1]) == 1:
        if len(coincidence[0]):
            text = coincidence[0].popitem()[1]
            user_db.update_user_current_choice(message.chat.id, text)
        else:
            text = coincidence[1].popitem()[1]
            user_db.update_user_current_choice(message.chat.id, text)

        text = utils.define_goup_or_teacher(text)

        try:
            await message_editor.modify_message(bot, message.chat.id, last_message_id, text=text,
                                                reply_markup=main_kb.get_keyboard())
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –ë–î
            message_from_bot = await message.answer(text=text, reply_markup=main_kb.get_keyboard())
            user_db.update_user_message_id(message_from_bot)

        return

    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –ø—É—Å—Ç—ã–µ
    if coincidence[0] or coincidence[1]:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message_editor.modify_message(bot, message.chat.id, last_message_id,
                                                "–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏—Å–∫–∞–ª–∏:",
                                                reply_markup=group_and_teacher_kb.get_keyboard(coincidence))
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –ë–î
            message_from_bot = await message.answer("–ë—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:",
                                                    reply_markup=group_and_teacher_kb.get_keyboard(coincidence))
            user_db.update_user_message_id(message_from_bot)
    else:
        text_message = ("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã / –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—â—ë —Ä–∞–∑.")

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        try:
            await message_editor.modify_message(bot, message.chat.id, last_message_id, text_message)
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –ë–î
            message_from_bot = await message.answer(text_message)
            user_db.update_user_message_id(message_from_bot)


@dp.callback_query(group_and_teacher_kb.KeyboardGroupsTeachers.filter(F.action == "go_to_back"))
async def click_back_group_and_teacher_kb(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã/–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_message_id = user_db.get_last_message_id(callback.message.chat.id)
    text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã / –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."

    try:
        await message_editor.modify_message(bot, callback.message.chat.id, last_message_id, text)
    except RuntimeError:
        message_from_bot = await callback.message.answer(text)
        user_db.update_user_message_id(message_from_bot)


@dp.callback_query(group_and_teacher_kb.KeyboardGroupsTeachers.filter(F.action == "choice"))
async def click_group_or_teacher(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã/–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_message_id = user_db.get_last_message_id(callback.message.chat.id)

    # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–Ω–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    current_choice = ''

    for dic in callback.message.reply_markup.inline_keyboard:
        for item in dic:
            if item.callback_data == callback.data:
                current_choice = item.text
            pass

    user_db.update_user_current_choice(callback.message.chat.id, current_choice)
    text = utils.define_goup_or_teacher(current_choice)

    try:
        await message_editor.modify_message(bot, callback.message.chat.id, last_message_id, text=text,
                                            reply_markup=main_kb.get_keyboard())
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –ë–î
        message_from_bot = await callback.message.answer(text=text, reply_markup=main_kb.get_keyboard())
        user_db.update_user_message_id(message_from_bot)


@dp.callback_query(main_kb.KeyboardMain.filter(F.action == "go_to_back"))
async def click_back_main(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ main –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""
    # –í—ã–∑—ã–≤–∞–µ–º —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –∫–æ–ª–ª–±—ç–∫ –∏–∑ –¥—Ä—É–≥–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await click_back_group_and_teacher_kb(callback)


@dp.callback_query(schedule_kb.KeyboardSchedule.filter(F.action == "pressed_go_back"))
async def click_back_sch(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    current_choise = user_db.get_user_current_choice(callback.message.chat.id)
    current_choise = utils.define_goup_or_teacher(current_choise)

    last_message_id = user_db.get_last_message_id(callback.message.chat.id)

    try:
        await message_editor.modify_message(bot, callback.message.chat.id, last_message_id, text=current_choise,
                                            reply_markup=main_kb.get_keyboard())
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –ë–î
        message_from_bot = await callback.message.answer(text=current_choise, reply_markup=main_kb.get_keyboard())
        user_db.update_user_message_id(message_from_bot)


@dp.callback_query(main_kb.KeyboardMain.filter(F.action == "schedule_current_week"))
async def click_sch_current_week(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"""
    current_choise = user_db.get_user_current_choice(callback.message.chat.id)

    current_schedule = ""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if current_choise.endswith("."):
        pass
    else:
        current_schedule = sch.get_week_schedule_group(current_choise)

    last_message_id = user_db.get_last_message_id(callback.message.chat.id)

    try:
        await message_editor.modify_message(bot, callback.message.chat.id, last_message_id, text=current_schedule,
                                            reply_markup=schedule_kb.get_keyboard())
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –ë–î
        message_from_bot = await callback.message.answer(text=current_schedule, reply_markup=schedule_kb.get_keyboard())
        user_db.update_user_message_id(message_from_bot)


async def main():
    # –î–ª—è –ª–æ–≥–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    logging.basicConfig(level=logging.INFO)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    await dp.start_polling(bot)


if __name__ == "__main__":
    user_db = UserDatabase()
    import time
    start = time.time()
    sch = ScheduleData()
    end = time.time()
    print("The time of execution of above program is :",
          (end - start) * 10 ** 3, "ms")
    bot = aiogram.Bot(token=config.bot_token)
    asyncio.run(main())


# TO DO: –≠—Ç–æ –±—É–¥–µ—Ç –∫–ª–∞—Å—Å–Ω–æ–π –∑–∞–≥–æ—Ç–æ–≤–∫–æ–π, —á—Ç–æ–±—ã —É–¥–∞–ª—ë–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∏—Ö –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —É–¥–∞–ª—ë–Ω–Ω–æ
# @dp.message(Command(""))
# async def handle_get_users_data(message: types.Message):
#    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç –∞–¥–º–∏–Ω–æ–≤"""
#    pass
