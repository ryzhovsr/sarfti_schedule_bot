import asyncio
import logging
import aiogram

from aiogram import Dispatcher
from aiogram.filters import Command

# –°–≤–æ–∏ –º–æ–¥—É–ª–∏
import config
import edit_message

from userdb import *
from utils import find_coincidence_group_teacher
from schedule_data import ScheduleData

dp = Dispatcher()


@dp.message(Command("start"))
async def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_db.is_user_exists(message.chat.id) is not None:
        await edit_message.delete_last_message_from_db(message.bot, message.chat.id, user_db.get_cursor())

    message_from_bot = await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã \n"
                                                 f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã / –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")

    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É /start —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await edit_message.delete_current_message_from_user(message)

    # –û–±–Ω–æ–≤–ª—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_db.update_user_message_id(message_from_bot)


@dp.message()
async def handle_any_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await edit_message.delete_last_message_from_db(message.bot, message.chat.id, user_db.get_cursor())
    await edit_message.delete_current_message_from_user(message)

    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä—É–ø–ø–∞–º–∏/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
    coincidence = await find_coincidence_group_teacher(message.text, sch)

    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –ø—É—Å—Ç—ã–µ
    if coincidence[0] or coincidence[1]:
        message_from_bot = await message.answer(text="–Ø –Ω–∞—à—ë–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è!")
    else:
        message_from_bot = await message.answer(text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüòï\n"
                                                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã / –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—â—ë —Ä–∞–∑.")

    user_db.update_user_message_id(message_from_bot)


async def main():
    # –î–ª—è –ª–æ–≥–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    logging.basicConfig(level=logging.INFO)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    await dp.start_polling(bot)


if __name__ == "__main__":
    user_db = UserDatabase()
    sch = ScheduleData()
    bot = aiogram.Bot(token=config.bot_token)
    asyncio.run(main())


# TO DO: –≠—Ç–æ –±—É–¥–µ—Ç –∫–ª–∞—Å—Å–Ω–æ–π –∑–∞–≥–æ—Ç–æ–≤–∫–æ–π, —á—Ç–æ–±—ã —É–¥–∞–ª—ë–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∏—Ö –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —É–¥–∞–ª—ë–Ω–Ω–æ
# @dp.message(Command(""))
# async def handle_get_users_data(message: types.Message):
#    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç –∞–¥–º–∏–Ω–æ–≤"""
#    pass
