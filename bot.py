# -*- coding: utf-8 -*-

# –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import ast
import configparser
import datetime
import glob
import locale
import os
import pandas as pd
import requests
import telebot
import time
import threading
import traceback
from bs4 import BeautifulSoup
from datetime import datetime, timedelta, date
from telebot import types
from io import StringIO
import tables
# pytelegrambotapi requests pandas lxml bs4 urllib3 html_table_parser pytables

locale.setlocale(locale.LC_ALL, '')

# –æ–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
in_groups = {} # —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∏—Ö group_id
in_teachers = {} # —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–æ–≤ –∏ –∏—Ö teacher_id
in_places = {} # —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–π –∏ –∏—Ö place_id
in_dates = {} # —Å–ø–∏—Å–æ–∫ —É—á–µ–±–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –∏ –∏—Ö date_id
in_week = {} # —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
week_id = '' # id —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
# –≤—Å–µ —Å–ø–∏—Å–∫–∏ –≤—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ "–≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã/–ø—Ä–µ–ø–æ–¥–∞/–Ω–µ–¥–µ–ª–∏/–∞—É–¥–∏—Ç–æ—Ä–∏–∏"
soup = '' # —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
raw_input = '' # –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
# –æ–±–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω—É–∂–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Ç–∞–∫ –≤—Å–µ –ø–µ—Ä–≤–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
v_version = '22.07.22' # –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞
c_token = '' #
config = configparser.ConfigParser() # —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é-–ø–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞
config.read('bot.ini', encoding="utf-8") # —á–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
bot_token = str(config['set']['token']) # –±–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã bot.api
#c_admin_list = [int(x) for x in config.get('set', 'admin_list').split(',')]
bot = telebot.TeleBot(bot_token, threaded=False) # —Å–æ–∑–¥–∞–µ–º/—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞
userdir = '' # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—É—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
menu_1 = {} # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
key_list_groups = {} # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
user_config = {} # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –∑–¥–µ—Å—å —Ö–∏—Ç—Ä–æ—Å—Ç—å: —Å–º–æ—Ç—Ä–∏–º, –ø–æ–¥ —á–µ–º –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∫—Ä–∏–ø—Ç, –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏
if os.name == 'nt':
    userdir = os.path.join(os.getcwd(), 'users\\')
else:
    userdir = os.path.join(os.getcwd(), 'users/')

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä
timing = time.time()

# –æ–ø–∏—Å—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
# —Ç–µ–ª–æ —Å–∫—Ä–∏–ø—Ç–∞
def main():
    # –∑–¥–µ—Å—å –æ–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –±–æ—Ç–∞ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ (–≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏, –ø–æ —Å–æ–±—ã—Ç–∏—é –∏–ª–∏ —Ç–∞–π–º–µ—Ä—É)
    loadin()
    pass

    # –µ—Å–ª–∏ –±–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—ã /reset –∏–ª–∏ /start
    @bot.message_handler(commands=['reset', 'start'])
    def any_msg(message):
        logcheck(t_user_id=message.from_user.id)
        global menu_1

        print(log_dt + ': user (' + str(message.from_user.id) + ') access start or reset')

        # —É–¥–∞–ª–∏–º –∏–∑ —á–∞—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        remove_message(t_user_id = message.from_user.id, t_message_id=message.message_id)

        # –ø–æ–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –±–æ—Ç–∞
        user_info_read(t_user_id = message.from_user.id)
        send_main_menu(t_user_id = message.from_user.id, t_chat_id=message.chat.id, t_message_id=message.message_id)

    # –µ—Å–ª–∏ –±–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É –æ—Ç –∫–Ω–æ–ø–æ–∫ (callback)
    @bot.callback_query_handler(func=lambda call: True)
    def callback_worker(call):
        global menu_1, key_list_groups, user_config
        logcheck(t_user_id = call.message.chat.id)
        print(log_dt + ': user (' + str(call.from_user.id) + ') access ' + str(call.data))

        # –µ—Å–ª–∏ –≤ –º–µ–Ω—é_1 –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
        if 'pressed_0_' in call.data and os.path.isfile(userdir + str(call.from_user.id) + '/stepm'):

            # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
            if call.data == 'pressed_0_1':
                try:
                    os.remove(userdir + str(call.from_user.id) + '/stepm')
                except:
                    pass

                f = open(userdir + str(call.from_user.id) + '/step_1_1', "w+")
                f.write(str(1))
                f.close()

                key_list_groups = [None] * in_groups.__len__()
                i = 1
                for key_i in in_groups:
                    key_list_groups[i - 1] = types.InlineKeyboardButton(text=in_groups[key_i], callback_data='pressed_1_' + str(i))
                    i = i + 1
                keyboard = types.InlineKeyboardMarkup(keyboard=None, row_width=3)
                i = 0
                for key_i in range(0, key_list_groups.__len__()):
                    if key_list_groups.__len__() - i >= 3:
                        keyboard.add(key_list_groups[i], key_list_groups[i + 1], key_list_groups[i + 2])
                        i = i + 3
                        continue
                    if key_list_groups.__len__() - i == 2:
                        keyboard.add(key_list_groups[i], key_list_groups[i + 1])
                        break
                    if key_list_groups.__len__() - i == 1:
                        keyboard.add(key_list_groups[i])
                        break

                key_back = types.InlineKeyboardButton(text='‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='pressed_menu')
                keyboard.add(key_back)

                text_out = '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:'
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text=text_out,
                                          reply_markup=keyboard)
                except:
                    bot.send_message(chat_id=call.message.chat.id, text=text_out,
                                     reply_markup=keyboard)

            # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if call.data == 'pressed_0_2':
                group = ''
                user_info_read(t_user_id=call.message.chat.id)
                for group in in_groups:
                    if group == str(user_config['group_id']):
                        group = in_groups[group]
                        break

                if group == '':
                    text_out = '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É'
                else:
                    today = datetime.now()
                    text_out = '*üìÖ ' + pd.to_datetime(in_dates[week_id]).strftime('%d %B') + ' - ' + \
                               (pd.to_datetime(in_dates[week_id]) + timedelta(days=7)).strftime('%d %B %Y–≥') + '*\n'

                    dayf = False
                    dayprev = ''
                    for index, row in pd.read_hdf('in_week.h5', week_id).query('–ì—Ä—É–ø–ø–∞ == @group').iterrows():
                        dayt = str(row['–î–µ–Ω—å'])
                        if dayprev == dayt and dayf == False: dayf = True
                        if dayprev != dayt:
                            dayprev = dayt
                            dayf = False
                            text_out = text_out + '\n'

                        if dayt == '–ü–ù' and dayf == False:
                            text_out = text_out + 'üîπ *–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö:*\n'
                        if dayt == '–í–¢' and dayf == False:
                            text_out = text_out + 'üîπ *–í–¢–û–†–ù–ò–ö:*\n'
                        if dayt == '–°–†' and dayf == False:
                            text_out = text_out + 'üîπ *–°–†–ï–î–ê:*\n'
                        if dayt == '–ß–¢' and dayf == False:
                            text_out = text_out + 'üîπ *–ß–ï–¢–í–ï–†–ì:*\n'
                        if dayt == '–ü–¢' and dayf == False:
                            text_out = text_out + 'üîπ *–ü–Ø–¢–ù–ò–¶–ê:*\n'
                        if dayt == '–°–£–ë' and dayf == False:
                            text_out = text_out + 'üîπ *–°–£–ë–ë–û–¢–ê:*\n'
                        if dayt == '–í–°' and dayf == False:
                            text_out = text_out + 'üîπ *–í–û–°–ö–†–ï–°–ï–ù–¨–ï:*\n'

                        tnum = str(row['–ü–∞—Ä–∞'])
                        if str(row['–ü–∞—Ä–∞']) == '1': tnum = u'\u0031\ufe0f\u20e3'
                        if str(row['–ü–∞—Ä–∞']) == '2': tnum = u'\u0032\ufe0f\u20e3'
                        if str(row['–ü–∞—Ä–∞']) == '3': tnum = u'\u0033\ufe0f\u20e3'
                        if str(row['–ü–∞—Ä–∞']) == '4': tnum = u'\u0034\ufe0f\u20e3'
                        if str(row['–ü–∞—Ä–∞']) == '5': tnum = u'\u0035\ufe0f\u20e3'
                        if str(row['–ü–∞—Ä–∞']) == '6': tnum = u'\u0036\ufe0f\u20e3'
                        if str(row['–ü–∞—Ä–∞']) == '7': tnum = u'\u0037\ufe0f\u20e3'
                        if str(row['–ü–∞—Ä–∞']) == '8': tnum = u'\u0038\ufe0f\u20e3'
                        if str(row['–ü–∞—Ä–∞']) == '9': tnum = u'\u0039\ufe0f\u20e3'

                        ttype = str(row['–¢–∏–ø']) + ','
                        if str(row['–¢–∏–ø']) == '–õ–µ–∫—Ü–∏—è': ttype = u'üí¨'
                        if str(row['–¢–∏–ø']) == '–ü—Ä–∞–∫—Ç–∏–∫–∞': ttype = u'üî•'
                        if '–õ–∞–±' in str(row['–¢–∏–ø']): ttype = str(row['–¢–∏–ø']).replace('–õ–∞–± —Ä–∞–±', u'üî•').replace('–õ–∞–±', u'üî•').replace('1 –ø–≥', u'üÖ∞').replace('2 –ø–≥', u'üÖ±')

                        tplace = str(row['–ê—É–¥–∏—Ç–æ—Ä–∏—è'])
                        if '–û–ù–õ–ê–ô–ù' in str(row['–ê—É–¥–∏—Ç–æ—Ä–∏—è']): tplace = str(row['–ê—É–¥–∏—Ç–æ—Ä–∏—è']).replace('–û–ù–õ–ê–ô–ù', u' üì°')
                        if '–û–Ω–ª–∞–π–Ω 1–î–û' in str(row['–ê—É–¥–∏—Ç–æ—Ä–∏—è']): tplace = str(row['–ê—É–¥–∏—Ç–æ—Ä–∏—è']).replace('–û–Ω–ª–∞–π–Ω 1–î–û', u'1–î–û üì°')
                        if '–û–Ω–ª–∞–π–Ω 2–î–û' in str(row['–ê—É–¥–∏—Ç–æ—Ä–∏—è']): tplace = str(row['–ê—É–¥–∏—Ç–æ—Ä–∏—è']).replace('–û–Ω–ª–∞–π–Ω 1–î–û', u'2–î–û üì°')

                        text_out = text_out + \
                                   tnum + ' ' + ttype + ' ' + \
                                   '[' + tplace + '] ' + \
                                   str(row['–ü—Ä–µ–¥–º–µ—Ç']) + ', ' + \
                                   str(row['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']) + '\n'

                keyboard = types.InlineKeyboardMarkup(keyboard=None, row_width=2)
                key_back = types.InlineKeyboardButton(text='‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='pressed_menu')
                key_time = types.InlineKeyboardButton(text='üïò –ü–∞—Ä—ã', callback_data='pressed_time')
                key_info = types.InlineKeyboardButton(text='‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='pressed_info')
                keyboard.add(key_time, key_info, key_back)

                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text=text_out,
                                          reply_markup=keyboard, parse_mode='Markdown')
                except:
                    bot.send_message(chat_id=call.message.chat.id, text=text_out,
                                     reply_markup=keyboard, parse_mode='Markdown')

            # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if call.data == 'pressed_0_3':
                try:
                    with open(userdir + str(call.message.chat.id) + '/config', "r") as data:
                        user_config = ast.literal_eval(data.read())
                        data.close()
                except:
                    pass
                # –∑–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è group_id –≤ –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_config['warning_on_rasp_change'] == 0:
                    user_config['warning_on_rasp_change'] = 1
                else:
                    user_config['warning_on_rasp_change'] = 0

                f = open(userdir + str(call.message.chat.id) + '/config', "w+")
                f.write("{'group_id':" + str(user_config['group_id']) + ", 'warning_on_rasp_change':" + str(
                    user_config['warning_on_rasp_change']) + ", 'c':" + str(user_config['c']) + ", 'd':" + str(
                    user_config['d']) + "}")
                f.close()

                user_info_read(t_user_id=call.message.chat.id)

                # –ø–æ–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
                send_main_menu(t_user_id=call.message.chat.id, t_chat_id=call.message.chat.id,
                               t_message_id=call.message.message_id)

        # –µ—Å–ª–∏ –º–µ–Ω—é_2 –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≥—Ä—É–ø–ø—ã
        if 'pressed_1_' in call.data and os.path.isfile(userdir + str(call.from_user.id) + '/step_1_1'):

            for x in range(1, key_list_groups.__len__() + 1):
                if call.data == 'pressed_1_' + str(x):
                    try:
                        os.remove(userdir + str(call.message.chat.id) + '/step_1_1')
                    except:
                        pass

                    # —Å–æ–∑–¥–∞–¥–∏–º –º–µ—Ç–∫—É, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞
                    f = open(userdir + str(call.message.chat.id) + '/stepm', "w+")
                    f.write('1')
                    f.close()

                    try:
                        with open(userdir + str(call.message.chat.id) + '/config', "r") as data:
                            user_config = ast.literal_eval(data.read())
                            data.close()
                    except:
                        pass
                    # –∑–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è group_id –≤ –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_config['group_id'] = list(in_groups.keys())[x - 1]
                    f = open(userdir + str(call.message.chat.id) + '/config', "w+")
                    f.write("{'group_id':" + str(user_config['group_id']) + ", 'warning_on_rasp_change':" + str(user_config['warning_on_rasp_change']) + ", 'c':" + str(user_config['c']) + ", 'd':" + str(user_config['d']) + "}")
                    f.close()

                    user_info_read(t_user_id=call.message.chat.id)

                    # –ø–æ–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
                    send_main_menu(t_user_id=call.message.chat.id, t_chat_id=call.message.chat.id,
                                   t_message_id=call.message.message_id)

                    break

        # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        if 'pressed_menu' in call.data:
            try:
                os.remove(userdir + str(call.message.chat.id) + '/step_1_1')
            except:
                pass

            # –ø–æ–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –±–æ—Ç–∞
            send_main_menu(t_user_id=call.message.chat.id, t_chat_id=call.message.chat.id,
                           t_message_id=call.message.message_id)

        # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—á–∏—Å–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if 'pressed_del' in call.data:
            with open(userdir + str(call.message.chat.id) + '/delmsg.id', "r") as delmsg:
                delmsg_id = delmsg.read()
                delmsg.close()

            try:
                bot.delete_message(chat_id=call.message.chat.id, message_id=int(delmsg_id))
            except:
                pass

            try:
                os.remove(userdir + str(call.message.chat.id) + '/delmsg.id')
            except:
                pass

        # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        if call.data == 'pressed_info':
            text_out = '‚ùì –ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç –∑–Ω–∞—á–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π:\n\n' + \
                u'\u0031\ufe0f\u20e3' + ' - –Ω–æ–º–µ—Ä –ø–∞—Ä—ã\n' + \
                u'üí¨' + ' - –ª–µ–∫—Ü–∏—è\n' + \
                u'üî•' + ' - –ø—Ä–∞–∫—Ç–∏–∫–∞, –ª–∞–±–∞\n' + \
                u'üì°' + ' - –æ–Ω–ª–∞–π–Ω\n' + \
                u'üÖ∞' + ' - –ø–æ–¥–≥—Ä—É–ø–ø–∞ 1\n' + \
                u'üÖ±' + ' - –ø–æ–¥–≥—Ä—É–ø–ø–∞ 2'

            keyboard = types.InlineKeyboardMarkup(keyboard=None, row_width=2)
            key_back = types.InlineKeyboardButton(text='‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='pressed_menu')
            key_time = types.InlineKeyboardButton(text='üïò –ü–∞—Ä—ã', callback_data='pressed_time')
            key_rasp = types.InlineKeyboardButton(text='üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='pressed_0_2')
            keyboard.add(key_time, key_rasp, key_back)

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=text_out,
                                      reply_markup=keyboard)
            except:
                bot.send_message(chat_id=call.message.chat.id, text=text_out,
                                 reply_markup=keyboard)

        # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–∞—Ä –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        if call.data == 'pressed_time':
            text_out = 'üïò –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä.\n\n' + \
                       'üîπ *–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö - –ü–Ø–¢–ù–ò–¶–ê:*\n'
            for item in in_rasp_time.items():
                if '1' in item[0]: text_out = text_out + u'\u0031\ufe0f\u20e3'
                if '2' in item[0]: text_out = text_out + u'\u0032\ufe0f\u20e3'
                if '3' in item[0]: text_out = text_out + u'\u0033\ufe0f\u20e3'
                if '4' in item[0]: text_out = text_out + u'\u0034\ufe0f\u20e3'
                if '5' in item[0]: text_out = text_out + u'\u0035\ufe0f\u20e3'
                if '6' in item[0]: text_out = text_out + u'\u0036\ufe0f\u20e3'
                if '7' in item[0]: text_out = text_out + u'\u0037\ufe0f\u20e3'
                if '8' in item[0]: text_out = text_out + u'\u0038\ufe0f\u20e3'
                if '9' in item[0]: text_out = text_out + u'\u0039\ufe0f\u20e3'
                text_out = text_out + ' ' + item[1] + '\n'

            text_out = text_out + '\nüîπ *–°–£–ë–ë–û–¢–ê:*\n'
            for item in in_rasp_time_vih.items():
                if '1' in item[0]: text_out = text_out + u'\u0031\ufe0f\u20e3'
                if '2' in item[0]: text_out = text_out + u'\u0032\ufe0f\u20e3'
                if '3' in item[0]: text_out = text_out + u'\u0033\ufe0f\u20e3'
                if '4' in item[0]: text_out = text_out + u'\u0034\ufe0f\u20e3'
                if '5' in item[0]: text_out = text_out + u'\u0035\ufe0f\u20e3'
                if '6' in item[0]: text_out = text_out + u'\u0036\ufe0f\u20e3'
                if '7' in item[0]: text_out = text_out + u'\u0037\ufe0f\u20e3'
                if '8' in item[0]: text_out = text_out + u'\u0038\ufe0f\u20e3'
                if '9' in item[0]: text_out = text_out + u'\u0039\ufe0f\u20e3'
                text_out = text_out + ' ' + item[1] + '\n'


            keyboard = types.InlineKeyboardMarkup(keyboard=None, row_width=2)
            key_back = types.InlineKeyboardButton(text='‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='pressed_menu')
            key_info = types.InlineKeyboardButton(text='‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='pressed_info')
            key_rasp = types.InlineKeyboardButton(text='üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='pressed_0_2')
            keyboard.add(key_rasp, key_info, key_back)

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=text_out,
                                      reply_markup=keyboard, parse_mode='Markdown')
            except:
                bot.send_message(chat_id=call.message.chat.id, text=text_out,
                                 reply_markup=keyboard, parse_mode='Markdown')

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∏–Ω—É–ª –±–æ—Ç—É —á—Ç–æ-—Ç–æ, —á—Ç–æ –±–æ—Ç—É –Ω–µ –Ω—É–∂–Ω–æ - —É–¥–∞–ª–∏–º —ç—Ç–æ –∏–∑ —á–∞—Ç–∞
    @bot.message_handler(content_types=['sticker', 'text', 'location', 'photo', 'document'])
    def any_msg(message):
        logcheck(t_user_id = message.from_user.id)

        # —É–¥–∞–ª–∏–º –∏–∑ —á–∞—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        remove_message(t_user_id=message.from_user.id, t_message_id=message.message_id)

    my_thread = threading.Thread(target=timecheck)
    my_thread.start()

    # —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
    while True:
        try:
            bot.polling(non_stop=True)
            time.sleep(2)

        except Exception as e:
            # print(e)  # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ print(e) –µ—Å–ª–∏ —É –≤–∞—Å –ª–æ–≥–≥–µ—Ä–∞ –Ω–µ—Ç,
            # –∏–ª–∏ import traceback; traceback.print_exc() –¥–ª—è –ø–µ—á–∞—Ç–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—ã
            traceback.print_exc()
            # time.sleep(1)

        time.sleep(1)

def timecheck():
    global timing, week_id, bot, in_groups

    while True:
        if time.time() - timing > 300:
            timing = time.time()
            nowtime = datetime.now()
            store_back = pd.read_hdf('in_week.h5', week_id)
            loadin()
            store_now = pd.read_hdf('in_week.h5', week_id)
            df_diff = pd.concat([store_back, store_now]).drop_duplicates(keep=False)

            if (not store_now.equals(store_back)) and (nowtime.hour >= 7) and (nowtime.hour <= 21) :
                for subdir, dirs, files in os.walk(userdir):
                    for file in files:
                        if 'config' in file:
                            try:
                                user_id = subdir.replace(userdir, '')
                                with open(userdir + str(user_id) + '/config', "r") as udata:
                                    user_conf = ast.literal_eval(udata.read())
                                    udata.close()

                                if user_conf['warning_on_rasp_change'] == 1:
                                    for dif_group in df_diff['–ì—Ä—É–ø–ø–∞']:
                                        if dif_group == in_groups[str(user_conf['group_id'])]:

                                            text_out2 = '*‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏! ‚ö†*'

                                            keyboard = types.InlineKeyboardMarkup(keyboard=None, row_width=1)
                                            key_del = types.InlineKeyboardButton(text='‚ôª –ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚ôª',
                                                                                  callback_data='pressed_del')
                                            keyboard.add(key_del)

                                            try:
                                                botmsg = bot.send_message(chat_id=int(user_id), text=text_out2,
                                                                 reply_markup=keyboard, parse_mode='Markdown')

                                                try:
                                                    os.remove(userdir + user_id + '/delmsg.id')
                                                except:
                                                    pass

                                                delmsgu = open(userdir + user_id + '/delmsg.id', "w+")
                                                delmsgu.write(str(botmsg.message_id))
                                                delmsgu.close()

                                            except:
                                                pass

                                            break
                            except:
                                pass

                            time.sleep(60)

        time.sleep(5)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è "–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è" —Å–ø–∏—Å–∫–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞, –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏, –∏–±–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–µ–Ω—è—é—Ç—Å—è
def loadin():
    # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏, —á—Ç–æ–±—ã –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –æ—Ç–ª–∞–¥—á–∏–∫–µ
    global soup, raw_input, in_groups, in_teachers, in_dates, in_places, in_rasp_time, in_rasp_time_vih, in_week, week_id

    try:
        # –º–µ—Ç–æ–¥–æ–º HTTP.POST –∑–∞–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–∞–π—Ç–∞
        raw_input = requests.post('https://sarfti.ru/?page_id=20', data={'page_id': '20', 'view': '–ü—Ä–æ—Å–º–æ—Ç—Ä'}).text
        # —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        soup = BeautifulSoup(raw_input, 'lxml')
        # –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü <td></td> —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
        groups = [i.findAll('option') for i in soup.findAll('select', attrs = {'name': 'group_id'})]
        teachers = [i.findAll('option') for i in soup.findAll('select', attrs = {'name': 'teacher_id'})]
        places = [i.findAll('option') for i in soup.findAll('select', attrs = {'name': 'place_id'})]
        dates = [i.findAll('option') for i in soup.findAll('select', attrs={'name': 'date_id'})]

        for item in soup.findAll('table', attrs={'style': 'width: 274px; border-style: none;'}):
                in_rasp_time = dict(x.split('=') for x in item.text.replace('\n\n\n1 –ø–∞—Ä–∞','1 –ø–∞—Ä–∞').replace('\xa0', ' ').replace('\n\n\n', ';').replace('\n‚Äì\n', '=').replace('\n', ' | ')[:-1].split(';'))
                break
        for item in soup.findAll('table', attrs={'style': 'width: 273px; border: none;'}):
                in_rasp_time_vih = dict(x.split('=') for x in item.text.replace('\n\n\n1 –ø–∞—Ä–∞','1 –ø–∞—Ä–∞').replace('\xa0', ' ').replace('\n\n\n', ';').replace('\n‚Äì\n', '=').replace('\n', ' | ')[:-1].split(';'))
                break

        # –ø—Ä–æ–≥–æ–Ω—è–µ–º —Ü–∏–∫–ª –ø–æ –≤—Å–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –≤—ã—à–µ, –∑–∞–ø–æ–ª–Ω—è—è —Å–ø–∏—Å–∫–∏
        for item in [groups, teachers, places, dates]:
            # –ø—Ä–æ–≥–æ–Ω—è–µ–º —Ü–∏–∫–ª –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
            for i in range (0, item[0].__len__()):
                # –µ—Å–ª–∏ –µ–ª–µ–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–í—ã–±–µ—Ä–∏—Ç–µ", —Ç–æ –∑–∞–≥–æ–Ω—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
                if '–í—ã–±–µ—Ä–∏—Ç–µ' not in item[0][i].text:
                    # –µ—Å–ª–∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –µ–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π groups
                    if item == groups: in_groups[item[0][i].attrs['value']] = item[0][i].text
                    # –µ—Å–ª–∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –µ–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π teachers
                    if item == teachers: in_teachers[item[0][i].attrs['value']] = item[0][i].text
                    # –µ—Å–ª–∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –µ–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π places
                    if item == places: in_places[item[0][i].attrs['value']] = item[0][i].text
                    # –µ—Å–ª–∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –µ–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π dates
                    if item == dates: in_dates[item[0][i].attrs['value']] = item[0][i].text
                    # —É—Å–ª–æ–≤–∏—è –≤—ã—à–µ –∑–∞–≥–Ω–∞–Ω—ã –≤ –æ–¥–∏–Ω —Ü–∏–∫–ª, –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤

        # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏, –æ–Ω–∏ –Ω–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
        del groups, teachers, places, dates, i, item

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á—É—é –Ω–µ–¥–µ–ª—é
        now = datetime.now()
        for week in list(in_dates):
            if now >= pd.to_datetime(in_dates[week]) - timedelta(days=1) and now < pd.to_datetime(in_dates[week]) + timedelta(days=7):
                current_week = pd.to_datetime(in_dates[week]).strftime('%Y-%m-%d')
                week_id = week
                break

        # –º–µ—Ç–æ–¥–æ–º HTTP.POST –∑–∞–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–∞–π—Ç–∞
        answer = requests.post('http://scs.sarfti.ru/login/index',
                               data={'login': '', 'password': '', 'guest': '–í–æ–π—Ç–∏+–∫–∞–∫+–ì–æ—Å—Ç—å'})

        traw_input = requests.post('http://scs.sarfti.ru/date/printT',
                                   data={'id': week_id, 'show': '–†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å', 'list': 'list',
                                         'compact': 'compact'},
                                   cookies=answer.history[0].cookies)
        traw_input.encoding = 'utf-8'


        # —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        pdtemp = pd
        for item in pdtemp.read_html(StringIO(traw_input.text)):
            if '–î–µ–Ω—å' and '–ü–∞—Ä–∞' in item:
                try:
                    os.remove('in_week.h5')
                except:
                    pass
                store = pd.HDFStore('in_week.h5')
                store[week_id] = item
                store.close()
                in_week = item
                break
    except:
        pass

# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def send_main_menu(t_user_id, t_chat_id, t_message_id):
    global menu_1, key_list_0, user_config

    # –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ "–º–µ—Ç–∫–∏" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é –±–æ—Ç–∞ - —É–¥–∞–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –≤—ã–∑–≤–∞–Ω —Ä–µ–∂–∏–º "–≤—Å—ë —Å–Ω–∞—á–∞–ª–∞"
    fileList = glob.glob(userdir + str(t_user_id) + '/step*')
    for filePath in fileList:
        try:
            os.remove(filePath)
        except:
            print(log_dt + ": Error while deleting file : ", filePath)

    # —Å–æ–∑–¥–∞–¥–∏–º –º–µ—Ç–∫—É, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–º –º–µ–Ω—é –±–æ—Ç–∞
    f = open(userdir + str(t_user_id) + '/stepm', "w+")
    f.write('1')
    f.close()

    menu_1 = {1: 'üë• –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É', 2: 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 3: 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [–≤—ã–∫–ª]'}
    try:
        test = 'üë• ' + user_config['group_id']
    except:
        user_info_read(t_user_id)

    if user_config['group_id'] != None:
        try:
            menu_1[1] = 'üë• ' + in_groups[str(user_config['group_id'])]
        except:
            menu_1[1] = 'üë• –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É'
    else:
        menu_1[1] = 'üë• –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É'

    if user_config['warning_on_rasp_change'] == (0 | 1) and user_config['warning_on_rasp_change'] != None:
        if user_config['warning_on_rasp_change'] == 0: menu_1[3] = 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [–≤—ã–∫–ª]'
        if user_config['warning_on_rasp_change'] == 1: menu_1[3] = 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [–≤–∫–ª]'
    else:
        menu_1[3] = 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [–≤—ã–∫–ª]'
    key_list_0 = {}
    for i in range (1, menu_1.__len__() + 1):
        vars()['key_0_' + str(i)] = types.InlineKeyboardButton(
            text=str(menu_1[i]),
            callback_data='pressed_0_' + str(i))
        key_list_0[i] = eval('key_0_' + str(i))

    keyboard = types.InlineKeyboardMarkup(keyboard=None, row_width=1)
    for key_i in range(1, key_list_0.__len__() + 1):
        keyboard.add(key_list_0[key_i])

    text_out = '–ü—Ä–∏–≤–µ—Ç!'
    try:
        bot.edit_message_text(chat_id=t_chat_id, message_id=t_message_id,
                              text=text_out,
                              reply_markup=keyboard)
    except:
        bot.send_message(chat_id=t_chat_id,
                         text=text_out, reply_markup=keyboard)

# —Ñ—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_info_read(t_user_id):
    global user_config
    if os.path.exists(userdir + str(t_user_id) + '/config'):
        try:
            with open(userdir + str(t_user_id) + '/config', "r") as data:
                user_config = ast.literal_eval(data.read())
                data.close()
        except:
            os.remove(userdir + str(t_user_id) + '/config')
            f = open(userdir + str(t_user_id) + '/config', "w+")
            f.write("{'group_id':'', 'warning_on_rasp_change':0, 'c':0, 'd':0}")
            f.close()
            with open(userdir + str(t_user_id) + '/config', "r") as data:
                user_config = ast.literal_eval(data.read())
                data.close()
    else:
        f = open(userdir + str(t_user_id) + '/config', "w+")
        f.write("{'group_id':'', 'warning_on_rasp_change':0, 'c':0, 'd':0}")
        f.close()
        with open(userdir + str(t_user_id) + '/config', "r") as data:
            user_config = ast.literal_eval(data.read())
            data.close()

# —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def logcheck(t_user_id):
    global log_dt
    # –±–µ—Ä–µ–º –≤—Ä–µ–º—è/–¥–∞—Ç—É –¥–ª—è –ª–æ–≥–∞
    log_dt = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

    # –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ
    if not os.path.isdir(userdir):
        os.mkdir(userdir)

    # –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ
    if not os.path.isdir(userdir + str(t_user_id)):
        os.mkdir(userdir + str(t_user_id))

# —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —ç–µ–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —á–∞—Ç–∞
def remove_message(t_user_id, t_message_id):
    print(log_dt + ': reg user (' + str(t_user_id) + ') remove message from chat')
    try:
        bot.delete_message(chat_id=t_user_id, message_id=t_message_id)
    except:
        print(log_dt + ': reg user (' + str(t_user_id) + ') error remove message from chat')

# –≤—ã–∑–æ–≤ —Ç–µ–ª–∞ —Å–∫—Ä–∏–ø—Ç–∞, —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    main()
