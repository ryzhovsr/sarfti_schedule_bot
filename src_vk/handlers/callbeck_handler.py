from vkbottle.bot import Blueprint, MessageEvent
from vkbottle_types.events import GroupEventType
from src_vk.create import user_db, search_kb
from src_vk.keyboards import start_kb, back_kb
from src_vk.scripts import message_editor

bp = Blueprint("–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–æ–≤")


@bp.on.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=MessageEvent)
async def message_event_handler(event: MessageEvent):
    """–û—Ç–ª–æ–≤ callback"""
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    peer_id = event.peer_id
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    message_id = user_db.get_last_message_id(peer_id)

    callback = list(event.payload.keys())[0]

    if callback == "info":
        if event.payload[callback] == "info":
            await event.show_snackbar("–ë–æ—Ç–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüôÉ")

    if callback == "current_selection":
        # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
        await message_editor.edit_message(bp, peer_id, message_id,
                                          f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {event.payload[callback]}:",
                                          back_kb.get_keyboard())

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if callback == "search_menu":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if event.payload[callback] == "following":
            search_kb.set_page_number(peer_id, search_kb.get_page_number(peer_id) + 1)
            await message_editor.turn_page(bp, search_kb, peer_id, message_id, search_kb.get_page_number(peer_id))

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if event.payload[callback] == "previous":
            search_kb.set_page_number(peer_id, search_kb.get_page_number(peer_id) - 1)
            await message_editor.turn_page(bp, search_kb, peer_id, message_id, search_kb.get_page_number(peer_id))

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    if callback == "start_menu":

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
        if event.payload[callback] == "teacher":
            await message_editor.edit_message(bp, peer_id, message_id,
                                              "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
                                              back_kb.get_keyboard())
            user_db.update_user_is_teacher(peer_id, 1)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–°—Ç—É–¥–µ–Ω—Ç"
        if event.payload[callback] == "student":
            await message_editor.edit_message(bp, peer_id, message_id,
                                              "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",
                                              back_kb.get_keyboard())
            user_db.update_user_is_teacher(peer_id, 0)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É"
        if event.payload[callback] == "back":
            await message_editor.edit_message(bp, peer_id, message_id,
                                              await start_kb.get_text(bp, peer_id),
                                              start_kb.get_keyboard())
            user_db.update_user_is_teacher(peer_id, "NULL")
