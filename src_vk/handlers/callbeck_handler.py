from vkbottle.bot import MessageEvent, BotLabeler
from vkbottle_types.events import GroupEventType
from src_vk.create import user_db, search_kb, sch
from src_vk.keyboards import start_kb, back_kb, main_kb, schedule_kb, notification_kb
from src_vk.scripts import message_editor

labeler = BotLabeler()


@labeler.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=MessageEvent)
async def message_event_handler(event: MessageEvent):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç callback'–∏"""
    # –°–º–æ—Ç—Ä–∏–º, –∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –µ–≥–æ –∏–∑ –ë–î
    peer_id = event.peer_id
    message_id = user_db.get_last_message_id(peer_id)
    is_teacher = user_db.get_user_is_teacher(peer_id)
    current_selection = user_db.get_user_current_selection(peer_id)

    # –°–º–æ—Ç—Ä–∏–º callback –∫–Ω–æ–ø–∫–∏
    callback = list(event.payload.keys())[0]

    # –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if callback == "main_menu":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"
        if event.payload[callback] == "current_week":
            current_week_id = sch.get_current_week_id()
            text = sch.get_week_schedule_teacher(current_selection, current_week_id) if is_teacher \
                else sch.get_week_schedule_group(current_selection, current_week_id)

            await message_editor.edit_message(event, message_id, text, schedule_kb.get_keyboard())

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–∏–µ –Ω–µ–¥–µ–ª–∏"
        if event.payload[callback] == "other_week":
            dict_weeks = sch.get_upcoming_weeks_list()
            # –ï—Å–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if len(dict_weeks) == 0:
                await event.show_snackbar("–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥. –Ω–µ–¥–µ–ª—é –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ üòï")
            else:
                await message_editor.edit_message(event, message_id,
                                                  "–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥. –Ω–µ–¥–µ–ª–∏ üîé",
                                                  schedule_kb.get_keyboard_next_week(dict_weeks))

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        if event.payload[callback] == "notifications":
            await message_editor.edit_message(event, message_id,
                                              "–í—ã–±–µ—Ä–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                              notification_kb.get_keyboard(peer_id))

    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if callback == "notifications_menu":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ"
        if event.payload[callback] == "current_week_change":
            user_db.update_is_note_current_week_changes(peer_id, not user_db.get_user_notification(peer_id)[0])
            await message_editor.edit_message(event, message_id,
                                              "–í—ã–±–µ—Ä–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                              notification_kb.get_keyboard(peer_id))

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        if event.payload[callback] == "sch_next_week":
            user_db.update_is_note_new_schedule(peer_id, not user_db.get_user_notification(peer_id)[1])
            await message_editor.edit_message(event, message_id,
                                              "–í—ã–±–µ—Ä–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                              notification_kb.get_keyboard(peer_id))

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        if event.payload[callback] == "close":
            if current_selection != "NULL":
                await message_editor.edit_message(event, message_id,
                                                  main_kb.get_text(is_teacher, current_selection),
                                                  main_kb.get_keyboard(peer_id))
            else:
                await message_editor.edit_message(event, message_id,
                                                  await start_kb.get_text(event),
                                                  start_kb.get_keyboard())

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if callback == "schedule":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–∞—Ä—ã"
        if event.payload[callback] == "time":
            await message_editor.edit_message(event, message_id,
                                              schedule_kb.get_text_time(),
                                              schedule_kb.get_keyboard_after_press_time())

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        if event.payload[callback] == "info":
            await message_editor.edit_message(event, message_id,
                                              schedule_kb.get_text_info(),
                                              schedule_kb.get_keyboard_after_press_info())

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
        if event.payload[callback] == "back":
            await message_editor.edit_message(event, message_id,
                                              main_kb.get_text(is_teacher, current_selection),
                                              main_kb.get_keyboard(peer_id))

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if callback == "search_menu":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if event.payload[callback] == "following":
            search_kb.set_page_number(peer_id, search_kb.get_page_number(peer_id) + 1)

            await message_editor.turn_page(event, search_kb, message_id, search_kb.get_page_number(peer_id))

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if event.payload[callback] == "previous":
            search_kb.set_page_number(peer_id, search_kb.get_page_number(peer_id) - 1)

            await message_editor.turn_page(event, search_kb, message_id, search_kb.get_page_number(peer_id))

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    if callback == "start_menu":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
        if event.payload[callback] == "teacher":
            await message_editor.edit_message(event, message_id,
                                              "üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n(–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã)",
                                              back_kb.get_keyboard())

            user_db.update_user_is_teacher(peer_id, 1)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–°—Ç—É–¥–µ–Ω—Ç"
        if event.payload[callback] == "student":
            await message_editor.edit_message(event, message_id,
                                              "üë• –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n(–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã)",
                                              back_kb.get_keyboard())

            user_db.update_user_is_teacher(peer_id, 0)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É"
        if event.payload[callback] == "back":
            await message_editor.edit_message(event, message_id,
                                              await start_kb.get_text(event),
                                              start_kb.get_keyboard())

            # –û–±–Ω—É–ª—è–µ–º –ë–î
            user_db.update_user_is_teacher(peer_id, "NULL")
            user_db.update_user_current_selection(peer_id, "NULL")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –≥—Ä—É–ø–ø—É/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if callback == "current_selection":
        search_kb.delete_list_pages(peer_id)

        await message_editor.edit_message(event, message_id,
                                          main_kb.get_text(is_teacher, event.payload[callback]),
                                          main_kb.get_keyboard(peer_id))

        user_db.update_user_current_selection(peer_id, event.payload[callback])

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –Ω–µ–¥–µ–ª—é
    if callback == "week_selection":
        week = event.payload["week_selection"]
        text = sch.get_week_schedule_teacher(current_selection, week) if is_teacher \
            else sch.get_week_schedule_group(current_selection, week)

        await message_editor.edit_message(event, message_id, text, schedule_kb.get_keyboard())
