from vkbottle.bot import Message, BotLabeler

from schedule.utils import find_coincidence_group_teacher, add_dash_in_group
from src_vk.create import user_db, sch, search_kb
from src_vk.keyboards import start_kb, back_kb, main_kb
from src_vk.scripts import message_editor

labeler = BotLabeler()

labeler.vbml_ignore_case = True


@labeler.private_message(text=["–ù–∞—á–∞—Ç—å", "/start", "–ü—Ä–∏–≤–µ—Ç", "–•–∞–π", "start", "/reset", "reset"])
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_db.is_user_exists(message.peer_id) is not None:
        await message_editor.delete_message(message, user_db.get_last_message_id(message.peer_id))

    message_from_bot = await message.answer(message=await start_kb.get_text(message),
                                            keyboard=start_kb.get_keyboard())
    # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
    user_db.update_user_message_id(message_from_bot)
    user_db.update_user_is_teacher(message.peer_id, "NULL")
    user_db.update_user_current_selection(message.peer_id, "NULL")


@labeler.private_message()
async def message_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –°–º–æ—Ç—Ä–∏–º, –∫—Ç–æ –ø—Ä–∏—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –µ–≥–æ –∏–∑ –ë–î
    peer_id = message.peer_id
    is_teacher = user_db.get_user_is_teacher(peer_id)
    message_id = user_db.get_last_message_id(peer_id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –≥—Ä—É–ø–ø—É —Å–ª–∏—Ç–Ω–æ, —Ç–æ –æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç
    text = message.text if is_teacher else add_dash_in_group(message.text)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª, –∫–æ–≥–æ –∏—Å–∫–∞—Ç—å, —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if is_teacher != "NULL":
        coincidence = find_coincidence_group_teacher(text, sch)

        await message_editor.delete_message(message, message_id)

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if len(coincidence[is_teacher]) != 0:
            keyboard = search_kb.get_keyboard(peer_id, coincidence[is_teacher])[0]

            # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            if len(coincidence[is_teacher]) == 1:
                search_kb.delete_list_pages(peer_id)
                current_selection = keyboard.buttons[0][0].action.label
                message_from_bot = await message.answer(message=main_kb.get_text(is_teacher, current_selection),
                                                        keyboard=main_kb.get_keyboard(peer_id))

                user_db.update_user_current_selection(peer_id, current_selection)

            else:
                message_from_bot = await message.answer(message="–ë—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è üîé",
                                                        keyboard=keyboard)

            user_db.update_user_message_id(message_from_bot)

        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        else:
            message_from_bot = await message.answer(message=back_kb.get_text(is_teacher),
                                                    keyboard=back_kb.get_keyboard())

            user_db.update_user_message_id(message_from_bot)
