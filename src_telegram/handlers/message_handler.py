from aiogram import types, Dispatcher
from aiogram.filters import Command
from src_telegram.create import bot, user_db, sch
from src_telegram.scripts.message_editor import (delete_last_message_from_db,
                                                 delete_current_message_from_user,
                                                 modify_message, delete_notes)
from schedule.utils import add_sign_group_or_teacher, find_coincidence_group_teacher
from src_telegram.keyboards import selection_kb, main_kb
from schedule.utils import is_teacher, add_dash_in_group, write_user_action, check_key
from src_telegram import config


async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

    if user_db.is_user_exists(message.chat.id) is not None:
        await delete_last_message_from_db(message.bot, message.chat.id, user_db.get_cursor())

    message_from_bot = await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã \n"
                                                 f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã / –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")

    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É /start —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_current_message_from_user(message)

    # –û–±–Ω–æ–≤–ª—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_db.update_user_message_id(message_from_bot)
    write_user_action(message=message, action="–û—Ç–ø—Ä–∞–≤–∏–ª /start")


async def message_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    write_user_action(message=message, action=f"–û—Ç–ø—Ä–∞–≤–∏–ª {message.text}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if config.key == message.text:
        if await check_key(message):
            return

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_current_message_from_user(message)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ç–µ–∫—Å—Ç
    if message.text is None:
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = message.text.lower()

    if not is_teacher(message.text):
        text = add_dash_in_group(text)

    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä—É–ø–ø–∞–º–∏/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
    coincidence = find_coincidence_group_teacher(text, sch)

    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_message_id = user_db.get_last_message_id(message.chat.id)

    # –ï—Å–ª–∏ –º—ã –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ 1 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if len(coincidence[0]) == 1 and len(coincidence[1]) == 0 or len(coincidence[0]) == 0 and len(coincidence[1]) == 1:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –Ω–µ –ø—É—Å—Ç–æ–π –∏ –æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if len(coincidence[0]):
            if text == list(coincidence[0].values())[0].lower():
                text = coincidence[0].popitem()[1]
                user_db.update_user_current_selection(message.chat.id, text)

                text = add_sign_group_or_teacher(text)

                try:
                    await modify_message(bot, message.chat.id, last_message_id, text=text,
                                         reply_markup=main_kb.get_keyboard(message.chat.id))
                except RuntimeError:
                    message_from_bot = await message.answer(text=text,
                                                            reply_markup=main_kb.get_keyboard(message.chat.id))
                    user_db.update_user_message_id(message_from_bot)

                return
        else:
            if text == list(coincidence[1].values())[0].lower():
                text = coincidence[1].popitem()[1]
                user_db.update_user_current_selection(message.chat.id, text)

                text = add_sign_group_or_teacher(text)

                try:
                    await modify_message(bot, message.chat.id, last_message_id, text=text,
                                         reply_markup=main_kb.get_keyboard(message.chat.id))
                except RuntimeError:
                    message_from_bot = await message.answer(text=text,
                                                            reply_markup=main_kb.get_keyboard(message.chat.id))
                    user_db.update_user_message_id(message_from_bot)

                return

    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –ø—É—Å—Ç—ã–µ
    if coincidence[0] or coincidence[1]:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await modify_message(bot, message.chat.id, last_message_id, "–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏—Å–∫–∞–ª–∏:",
                                 reply_markup=selection_kb.get_selection_kb(coincidence))
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –ë–î
            message_from_bot = await message.answer("–ë—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:",
                                                    reply_markup=selection_kb.get_selection_kb(coincidence))
            user_db.update_user_message_id(message_from_bot)
    else:
        text_message = ("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã / –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—â—ë —Ä–∞–∑.")

        try:
            await modify_message(bot, message.chat.id, last_message_id, text_message)
        except RuntimeError:
            message_from_bot = await message.answer(text_message)
            user_db.update_user_message_id(message_from_bot)


def register_handlers_message(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dp.message.register(start_handler, Command("start"))
    dp.message.register(message_handler)


# TO DO: –≠—Ç–æ –±—É–¥–µ—Ç –∫–ª–∞—Å—Å–Ω–æ–π –∑–∞–≥–æ—Ç–æ–≤–∫–æ–π, —á—Ç–æ–±—ã —É–¥–∞–ª—ë–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∏—Ö –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —É–¥–∞–ª—ë–Ω–Ω–æ
# @dp.message(Command(""))
# async def handle_get_users_data(message: types.Message):
#    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É"""
#    pass
