from vkbottle import Keyboard, Callback, GroupEventType
from vkbottle.bot import Bot, Message, MessageEvent

from schedule_data import ScheduleData
from utils import find_coincidence_group_teacher
from vk_userdb import UserDatabase

token = "vk1.a.j8Yt1zZf7KLV75zluh9yXUmfoqE_lbgWZzX9xZaHgvm6kO8C96_ah-l7NXqBakFgzimC8AuMw0Fq0M4KbGQFUjzLrT3DtsFW8yHtdTSWbZY9JP2OhF12OVUwLVN_7ddkj7yxQdNFh-pgatYgWLzSvcA-2SrnG04jvADcNMmg-eUSEXW3j9kEmu3unAwnx2JcrqnY0DgpV1bmyzWEIFRoLA"
bot = Bot(token)
sch = ScheduleData()
user_db = UserDatabase()


# –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
async def initial_menu_keyboard(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é"""
    user = await bot.api.users.get(user_id)

    keyboard = (
        Keyboard(inline=True)
        .add(Callback("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", {"initial_menu": "teacher"}))
        .add(Callback("–°—Ç—É–¥–µ–Ω—Ç–∞", {"initial_menu": "student"}))
        .row()
        .add(Callback("–ò–Ω—Ñ–æ", {"info": "info"}))
    ).get_json()

    text = f'–ü—Ä–∏–≤–µ—Ç, {user[0].first_name} {user[0].last_name}!üëã\n –ö–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?'

    return keyboard, text


def search_menu_keyboard(coincidence: dict):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"""
    length = len(coincidence)
    roster = list(coincidence.values())
    limit = 6
    keyboards = []

    if length <= limit:
        keyboard = Keyboard(inline=True)
        for i in range(length):
            keyboard.add(Callback(f"{roster[i]}", {"name": f"{roster[i]}"}))
            if (i + 1) % 2 == 0:
                keyboard.row()
        if length % 2 != 0:
            keyboard.row()
        keyboards.append(keyboard)

    # –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è —Ñ–∏–≥–Ω—è, —è –Ω–∞–ø–∏—Å–∞–ª –∫–∞–∫ —á—É–≤—Å—Ç–≤—É—é, —Å–æ—Ä–∏ –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ª–µ–≥—á–µ
    else:
        count = int(length / limit)
        modul = length % limit
        for i in range(count + 1):
            keyboard = Keyboard(inline=True)
            for j in range(limit):
                if i == count and modul != 0 and j == modul:
                    break
                keyboard.add(Callback(f"{roster[j + i * limit]}", {"name": f"{j + i * limit}"}))
                if (j + 1) % 2 == 0:
                    keyboard.row()
            if modul % 2 != 0 and i == count:
                keyboard.row()
            if i == 0:
                keyboard.add(Callback("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", {"search_menu": "following"}))
            elif i == count:
                keyboard.add(Callback("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", {"search_menu": "previous"}))
            else:
                keyboard.add(Callback("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", {"search_menu": "previous"}))
                keyboard.add(Callback("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", {"search_menu": "following"}))
            keyboard.row()
            keyboards.append(keyboard)

    return keyboards


async def send_search_menu(message: Message, keyboards):
    keyboard = keyboards[0].add(Callback("–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É", {"initial_menu": "to_selection"})).get_json()
    message_from_bot = await message.answer(message="–ë—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:", keyboard=keyboard)
    user_db.update_user_message_id(message_from_bot)


@bot.on.private_message(text=["–ù–∞—á–∞—Ç—å", "/start", "–ü—Ä–∏–≤–µ—Ç"])
async def handle_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    keyboard, text = await initial_menu_keyboard(message.peer_id)
    message_from_bot = await message.answer(message=text, keyboard=keyboard)
    # –û–±–Ω–æ–≤–ª—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_db.update_user_message_id(message_from_bot)


@bot.on.private_message()
async def handle_any_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    coincidence = await find_coincidence_group_teacher(message.text, sch)
    is_teacher = user_db.get_is_teacher(message.peer_id)
    message_id = user_db.get_last_message_id(message.peer_id)

    if is_teacher is not None:
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.api.messages.delete(peer_id=message.peer_id, message_ids=message_id, delete_for_all=True)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç—É–¥–µ–Ω—Ç
        if is_teacher == 0 and len(coincidence[0]) != 0:
            await send_search_menu(message, search_menu_keyboard(coincidence[0]))

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        elif is_teacher == 1 and len(coincidence[1]) != 0:
            await send_search_menu(message, search_menu_keyboard(coincidence[1]))

        else:
            text = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏" + (
                " –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è " if is_teacher == 1 else " –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã ") + "–µ—â—ë —Ä–∞–∑."
            keyboard = ((Keyboard(inline=True)
                         .add(Callback("–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É", {"initial_menu": "to_selection"})))
                        .get_json())
            message_from_bot = await message.answer(message=text, keyboard=keyboard)
            user_db.update_user_message_id(message_from_bot)


@bot.on.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=MessageEvent)
async def message_event_handler(event: MessageEvent):
    """–û—Ç–ª–æ–≤ callback"""
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    peer_id = event.peer_id
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    message_id = user_db.get_last_message_id(peer_id)

    callback = list(event.payload.keys())[0]

    if callback == "info":
        if event.payload[callback] == "info":
            await event.show_snackbar("–ë–æ—Ç–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüôÉ")

    if callback == "search_menu":
        if event.payload[callback] == "following":
            pass
        if event.payload[callback] == "previous":
            pass

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    if callback == "initial_menu":
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
        to_selection = Callback("–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É", {"initial_menu": "to_selection"})
        keyboard = Keyboard(inline=True).add(to_selection).get_json()

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
        if event.payload[callback] == "teacher":
            await bot.api.messages.edit(peer_id=peer_id, message_id=message_id,
                                        message="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
                                        keyboard=keyboard)
            user_db.update_user_is_teacher(peer_id, 1)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–°—Ç—É–¥–µ–Ω—Ç"
        if event.payload[callback] == "student":
            await bot.api.messages.edit(peer_id=peer_id, message_id=message_id,
                                        message="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",
                                        keyboard=keyboard)
            user_db.update_user_is_teacher(peer_id, 0)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É"
        if event.payload[callback] == "to_selection":
            keyboard, text = await initial_menu_keyboard(peer_id)
            await bot.api.messages.edit(peer_id=peer_id, message_id=message_id, message=text,
                                        keyboard=keyboard)
            user_db.update_user_is_teacher(peer_id, "NULL")


if __name__ == "__main__":
    bot.run_forever()
