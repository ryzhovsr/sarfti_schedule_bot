from vkbottle import Keyboard, Text, Callback
from vkbottle.bot import Bot, Message
from vkbottle_types import GroupTypes
from vkbottle_types.events import GroupEventType

from schedule_data import ScheduleData
from utils import find_coincidence_group_teacher

token = "vk1.a.j8Yt1zZf7KLV75zluh9yXUmfoqE_lbgWZzX9xZaHgvm6kO8C96_ah-l7NXqBakFgzimC8AuMw0Fq0M4KbGQFUjzLrT3DtsFW8yHtdTSWbZY9JP2OhF12OVUwLVN_7ddkj7yxQdNFh-pgatYgWLzSvcA-2SrnG04jvADcNMmg-eUSEXW3j9kEmu3unAwnx2JcrqnY0DgpV1bmyzWEIFRoLA"
bot = Bot(token)
sch = ScheduleData()


# –ü–µ—Ä–Ω–µ—Å—Ç–∏ –≤ –¥—Ä—É–≥–æ–π –º–æ–¥—É–ª—å
def get_groups_teachers_fab(groups_and_teachers_data):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    builder = Keyboard(inline=True)
    count = 0  # –°—á–µ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫

    for dic in groups_and_teachers_data:
        for item, value in dic.items():
            builder.add(
                Callback(f"{value}", {"callback": f"{item}"})
            )

    return builder.get_json()


@bot.on.private_message(text=["–ù–∞—á–∞—Ç—å", "/start", "–ü—Ä–∏–≤–µ—Ç"])
async def handle_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = await bot.api.users.get(message.from_id)

    keyboard = (
        Keyboard(inline=True)
        .add(Callback("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", {"callback": "teacher"}))
        .add(Callback("–°—Ç—É–¥–µ–Ω—Ç–∞", {"callback": "student"}))
    ).get_json()

    message_from_bot = await message.answer(message=f'–ü—Ä–∏–≤–µ—Ç, {user[0].first_name} {user[0].last_name}!üëã\n'
                                 f'–ö–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?',
                         keyboard=keyboard)

    # await bot.api.messages.delete(peer_id=message.peer_id, message_ids=message.id + 1, delete_for_all=True) —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É –±–æ—Ç–∞


@bot.on.private_message()
async def handle_any_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä—É–ø–ø–∞–º–∏/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
    coincidence = await find_coincidence_group_teacher(message.text, sch)

    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –ø—É—Å—Ç—ã–µ
    if coincidence[0] or coincidence[1]:
        pass
        await message.answer(message="–ë—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:",
                             keyboard=get_groups_teachers_fab(coincidence))
    else:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüòï\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã / –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—â—ë —Ä–∞–∑.")

#–û—Ç–ª–æ–≤ callback
@bot.on.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=GroupTypes.MessageEvent)
async def message_event_handler(event: GroupTypes.MessageEvent):
    if event.object.payload["callback"] == "teacher":
        await bot.api.messages.delete(peer_id=event.peer_id, message_ids=event.object.


if __name__ == "__main__":
    bot.run_forever()
